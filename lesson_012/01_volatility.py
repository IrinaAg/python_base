# -*- coding: utf-8 -*-

# Описание предметной области:
#
# При торгах на бирже совершаются сделки - один купил, второй продал.
# Покупают и продают ценные бумаги (акции, облигации, фьючерсы, етс). Ценные бумаги - это по сути долговые расписки.
# Ценные бумаги выпускаются партиями, от десятка до несколько миллионов штук.
# Каждая такая партия (выпуск) имеет свой торговый код на бирже - тикер - https://goo.gl/MJQ5Lq
# Все бумаги из этой партии (выпуска) одинаковы в цене, поэтому говорят о цене одной бумаги.
# У разных выпусков бумаг - разные цены, которые могут отличаться в сотни и тысячи раз.
# Каждая биржевая сделка характеризуется:
#   тикер ценнной бумаги
#   время сделки
#   цена сделки
#   обьем сделки (сколько ценных бумаг было куплено)
#
# В ходе торгов цены сделок могут со временем расти и понижаться. Величина изменения цен называтея волатильностью.
# Например, если бумага №1 торговалась с ценами 11, 11, 12, 11, 12, 11, 11, 11 - то она мало волатильна.
# А если у бумаги №2 цены сделок были: 20, 15, 23, 56, 100, 50, 3, 10 - то такая бумага имеет большую волатильность.
# Волатильность можно считать разными способами, мы будем считать сильно упрощенным способом -
# отклонение в процентах от полусуммы крайних значений цены за торговую сессию:
#   полусумма = (максимальная цена + минимальная цена) / 2
#   волатильность = ((максимальная цена - минимальная цена) / полусумма) * 100%
# Например для бумаги №1:
#   half_sum = (12 + 11) / 2 = 11.5
#   volatility = ((12 - 11) / half_sum) * 100 = 8.7%
# Для бумаги №2:
#   half_sum = (100 + 3) / 2 = 51.5
#   volatility = ((100 - 3) / half_sum) * 100 = 188.34%
#
# В реальности волатильность рассчитывается так: https://goo.gl/VJNmmY
#
# Задача: вычислить 3 тикера с максимальной и 3 тикера с минимальной волатильностью.
# Бумаги с нулевой волатильностью вывести отдельно.
# Результаты вывести на консоль в виде:
#   Максимальная волатильность:
#       ТИКЕР1 - ХХХ.ХХ %
#       ТИКЕР2 - ХХХ.ХХ %
#       ТИКЕР3 - ХХХ.ХХ %
#   Минимальная волатильность:
#       ТИКЕР4 - ХХХ.ХХ %
#       ТИКЕР5 - ХХХ.ХХ %
#       ТИКЕР6 - ХХХ.ХХ %
#   Нулевая волатильность:
#       ТИКЕР7, ТИКЕР8, ТИКЕР9, ТИКЕР10, ТИКЕР11, ТИКЕР12
# Волатильности указывать в порядке убывания. Тикеры с нулевой волатильностью упорядочить по имени.
#
# Подготовка исходных данных
# 1. Скачать файл https://drive.google.com/file/d/1l5sia-9c-t91iIPiGyBc1s9mQ8RgTNqb/view?usp=sharing
#       (обратите внимание на значок скачивания в правом верхнем углу,
#       см https://drive.google.com/file/d/1M6mW1jI2RdZhdSCEmlbFi5eoAXOR3u6G/view?usp=sharing)
# 2. Раззиповать средствами операционной системы содержимое архива
#       в папку python_base/lesson_012/trades
# 3. В каждом файле в папке trades содержится данные по сделакам по одному тикеру, разделенные запятыми.
#   Первая строка - название колонок:
#       SECID - тикер
#       TRADETIME - время сделки
#       PRICE - цена сделки
#       QUANTITY - количество бумаг в этой сделке
#   Все последующие строки в файле - данные о сделках
#
# Подсказка: нужно последовательно открывать каждый файл, вычитывать данные, высчитывать волатильность и запоминать.
# Вывод на консоль можно сделать только после обработки всех файлов.
#
# Для плавного перехода к мультипоточности, код оформить в обьектном стиле, используя следующий каркас
#
# class <Название класса>:
#
#     def __init__(self, <параметры>):
#         <сохранение параметров>
#
#     def run(self):
#         <обработка данных>
from os import listdir, path
from python_snippets.utils import time_track


store = {}
trades = {}
file_path = 'trades'

class TickerVolatility:
    # TODO Эти две функции можно будет вынести в отдельный модуль и импортировать в каждое из заданий этого модуля

    def __init__(self, file_name, *args, **kwargs):
        self.file_name = file_name
        self.store = {}


    def run(self):
        ticker_name = path.basename(self.file_name).split('_')[1].split('.')[0]
        results = []
        with open(self.file_name, 'r') as f:
            for line in f:
                if line.startswith('SECID'):
                    continue
                else:
                    results.append(float(line.split(',')[2]))
        results = sorted(results)
        half_sum = (results[0] + results[-1]) / 2
        self.volatility = (results[-1] - results[0]) / half_sum * 100
        store[ticker_name] = (round(self.volatility, 2))

    # def _get_(self):
    #     try:
    #         main()
    #     except Exception as exc:
    #         print(exc)

class VolatilityPrint(TickerVolatility):
    # def __init__(self):
    #     super().__init__()


    def print(self):
        print('Максимальная волатильность:')
        view = sorted(store.items(), key=lambda elem: elem[1], reverse=True)
        for ticker, value in view[:3]:
            print(f'       {ticker} - {value}%')
        print('Минимальная волатильность:')
        view = [(ticker, vol) for ticker, vol in view if vol > 0]
        for ticker, value in view[-3:]:
            print(f'       {ticker} - {value}%')
        print('Нулевая волатильность:')
        zeroes = [ticker for ticker, vol in store.items() if vol == 0]
        print(f'       {", ".join(sorted(zeroes))}')


@time_track
def main():
    sizers = [TickerVolatility(path.join(file_path, file_name), trades) for file_name in listdir(file_path)]

    for sizer in sizers:
        sizer.run()

    proc = VolatilityPrint(TickerVolatility)
    proc.print()


if __name__ == '__main__':
    main()

